
# ［試して理解］Linuxのしくみ　―実験と図解で学ぶOS、仮想マシン、コンテナの基礎知識【増補改訂版】

## 第2章 プロセス管理（基礎編）

### プロセスの確認

```
ishii_tdd@PCS27515:~/hoge02/Linux_shikumi/1-1$ ps aux | grep ishii_t+
ishii_t+     922  0.0  0.1  16248  9616 pts/0    Ss   09:23   0:00 -bash
ishii_t+    1133  0.0  0.1  19212  9832 ?        Ss   09:23   0:00 /lib/systemd/systemd --user
ishii_t+    1134  0.0  0.0 171724  3716 ?        S    09:23   0:00 (sd-pam)
ishii_t+    1163  0.0  0.1 281404 14048 ?        Ssl  09:23   0:00 /usr/bin/pulseaudio --daemonize=no --log-target=journal
ishii_t+    1177  0.0  0.1  15644  8772 pts/1    S+   09:23   0:00 -bash
ishii_t+    1355  0.0  0.0   7116  4020 ?        Ss   09:23   0:00 /usr/bin/dbus-daemon --session --address=systemd: --nofork --nopidfile --systemd-activation --syslog-only
ishii_t+    1522  0.0  0.2  74260 20896 ?        S    09:23   0:00 fcitx
ishii_t+    1534  0.0  0.0   7116  3044 ?        Ss   09:23   0:00 /usr/bin/dbus-daemon --syslog --fork --print-pid 4 --print-address 6 --config-file /usr/share/fcitx/dbus/daemon.conf
ishii_t+    1538  0.0  0.0   5392   200 ?        SN   09:23   0:00 /usr/bin/fcitx-dbus-watcher unix:abstract=/tmp/dbus-Q9XSs0L0b5,guid=732f9d58ea0dd495f08b56bc64af43f3 1534
ishii_t+    1539  0.0  0.3  73664 30876 ?        SLl  09:23   0:00 /usr/lib/mozc/mozc_server
ishii_t+   14479  0.0  0.0   9136   576 pts/0    T    11:38   0:00 wc -l
ishii_t+   14541  0.0  0.0  12532  3220 pts/0    R+   11:39   0:00 ps aux
ishii_t+   14542  0.0  0.0  10076   652 pts/0    S+   11:39   0:00 grep --color=auto ishii_t+
ishii_tdd@PCS27515:~/hoge02/Linux_shikumi/1-1$ ps aux --no-header | wc -l
61
ishii_tdd@PCS27515:~/hoge02/Linux_shikumi/1-1$ ls | wc -l
8
```

1. fork()関数を呼び出してプロセスを分岐させる。
1. 子プロセス用の領域を確保して、親プロセスのメモリをコピーする。
1. 親プロセス、子プロセスは両方ともfork()関数から解放される。
1. 親プロセスと子プロセスでは、fork()関数の戻り値が異なる。
1. fork()の戻り値に関しては、親プロセスでは子プロセスのPIDとなり、子プロセスでは0となります。

```
ishii_tdd@PCS27515:~/hoge02/Linux_shikumi/2-1$ cat fork.py
#!/usr/bin/python3
import os, sys
# fork()関数を呼び出してプロセスを分岐させる。
ret = os.fork()
# 子プロセス用の領域を確保して、親プロセスのメモリをコピーする。
# 親プロセス、子プロセスは両方ともfork()関数から解放される。
# 親プロセスと子プロセスでは、fork()関数の戻り値が異なる。

# 子プロセスの戻り値は、0
# 子プロセスが動いている。
if ret == 0:
        print("子プロセス, pid={}, 親プロセス, pid={}".format(os.getpid(), os.getppid()))
        exit()
# 親プロセスの戻り値は、子プロセスのpid
# 親プロセスが動いている
elif ret > 0:
        print("親プロセス, pid={}, 子プロセス, pid={}".format(os.getpid(), ret))
        exit()
sys.exit(1)
ishii_tdd@PCS27515:~/hoge02/Linux_shikumi/2-1$ ./fork.py
親プロセス, pid=14833, 子プロセス, pid=14834
子プロセス, pid=14834, 親プロセス, pid=14833
```

1. os.execv() 関数 を呼び出す。
1. 現在のプロセスのメモリを、新しいプロセスのデータで上書きする。
1. 新しいプロセスの最初に実行すべき命令(エントリーポイント)を実行開始する。


```
ishii_tdd@PCS27515:~/hoge02/Linux_shikumi/2-1$ cat fork-and-exec.py
#!/usr/bin/python3
import os, sys
# fork()関数を呼び出してプロセスを分岐させる。
ret = os.fork()
# 子プロセス用の領域を確保して、親プロセスのメモリをコピーする。
# 親プロセス、子プロセスは両方ともfork()関数から解放される。
# 親プロセスと子プロセスでは、fork()関数の戻り値が異なる。

# 子プロセスの戻り値は、0
# 子プロセスが動いている。
if ret == 0:
        print("子プロセス, pid={}, 親プロセス, pid={}".format(os.getpid(), os.getppid()))
        os.execv("/bin/ls", ["/bin/ls", "-la"])
        exit()
# 親プロセスの戻り値は、子プロセスのpid
# 親プロセスが動いている
elif ret > 0:
        print("親プロセス, pid={}, 子プロセス, pid={}".format(os.getpid(), ret))
        os.execv("/bin/echo", ["/bin/echo", "pid={} からよろしく".format(os.getpid())])
        exit()
sys.exit(1)
ishii_tdd@PCS27515:~/hoge02/Linux_shikumi/2-1$ ./fork-and-exec.py
親プロセス, pid=14988, 子プロセス, pid=14989
子プロセス, pid=14989, 親プロセス, pid=14988
pid=14988 からよろしく
ishii_tdd@PCS27515:~/hoge02/Linux_shikumi/2-1$ total 16
drwxr-xr-x 2 ishii_tdd ishii_tdd 4096 Jul 13 14:32 .
drwxr-xr-x 4 ishii_tdd ishii_tdd 4096 Jul 13 13:13 ..
-rwxr-xr-x 1 ishii_tdd ishii_tdd  913 Jul 13 14:32 fork-and-exec.py
-rwxr-xr-x 1 ishii_tdd ishii_tdd  785 Jul 13 14:02 fork.py
```


```
ishii_tdd@PCS27515:~/hoge02/Linux_shikumi/2-1$ cc -o pause -no-pie pause.c
ishii_tdd@PCS27515:~/hoge02/Linux_shikumi/2-1$ readelf -h pause
ELF Header:
  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00
  Class:                             ELF64
  Data:                              2's complement, little endian
  Version:                           1 (current)
  OS/ABI:                            UNIX - System V
  ABI Version:                       0
  Type:                              EXEC (Executable file)
  Machine:                           Advanced Micro Devices X86-64
  Version:                           0x1
  Entry point address:               0x401050
  Start of program headers:          64 (bytes into file)
  Start of section headers:          14648 (bytes into file)
  Flags:                             0x0
  Size of this header:               64 (bytes)
  Size of program headers:           56 (bytes)
  Number of program headers:         13
  Size of section headers:           64 (bytes)
  Number of section headers:         31
  Section header string table index: 30

ishii_tdd@PCS27515:~/hoge02/Linux_shikumi/2-1$ readelf -S pause
There are 31 section headers, starting at offset 0x3938:

Section Headers:
  [Nr] Name              Type             Address           Offset
       Size              EntSize          Flags  Link  Info  Align
  [ 0]                   NULL             0000000000000000  00000000
       0000000000000000  0000000000000000           0     0     0
  [ 1] .interp           PROGBITS         0000000000400318  00000318
       000000000000001c  0000000000000000   A       0     0     1
  [ 2] .note.gnu.propert NOTE             0000000000400338  00000338
       0000000000000020  0000000000000000   A       0     0     8
  [ 3] .note.gnu.build-i NOTE             0000000000400358  00000358
       0000000000000024  0000000000000000   A       0     0     4
  [ 4] .note.ABI-tag     NOTE             000000000040037c  0000037c
       0000000000000020  0000000000000000   A       0     0     4
  [ 5] .gnu.hash         GNU_HASH         00000000004003a0  000003a0

```

プログラムから作成したプロセスのメモリマップは、/proc/<pid>/mapsのファイルによって得られる。
用が済んだら、pauseプロセスをkillする。


```
ishii_tdd@PCS27515:~/hoge02/Linux_shikumi/2-1$ ./pause &
[2] 15059
ishii_tdd@PCS27515:~/hoge02/Linux_shikumi/2-1$ cat /proc/15059/maps
00400000-00401000 r--p 00000000 08:20 348522                             /home/ishii_tdd/hoge02/Linux_shikumi/2-1/pause
00401000-00402000 r-xp 00001000 08:20 348522                             /home/ishii_tdd/hoge02/Linux_shikumi/2-1/pause
00402000-00403000 r--p 00002000 08:20 348522                             /home/ishii_tdd/hoge02/Linux_shikumi/2-1/pause
00403000-00404000 r--p 00002000 08:20 348522                             /home/ishii_tdd/hoge02/Linux_shikumi/2-1/pause
00404000-00405000 rw-p 00003000 08:20 348522                             /home/ishii_tdd/hoge02/Linux_shikumi/2-1/pause
7fdc48b8b000-7fdc48bad000 r--p 00000000 08:20 12573                      /usr/lib/x86_64-linux-gnu/libc-2.31.so
7fdc48bad000-7fdc48d25000 r-xp 00022000 08:20 12573                      /usr/lib/x86_64-linux-gnu/libc-2.31.so
7fdc48d25000-7fdc48d73000 r--p 0019a000 08:20 12573                      /usr/lib/x86_64-linux-gnu/libc-2.31.so
7fdc48d73000-7fdc48d77000 r--p 001e7000 08:20 12573                      /usr/lib/x86_64-linux-gnu/libc-2.31.so
7fdc48d77000-7fdc48d79000 rw-p 001eb000 08:20 12573                      /usr/lib/x86_64-linux-gnu/libc-2.31.so
7fdc48d79000-7fdc48d7f000 rw-p 00000000 00:00 0
7fdc48d8f000-7fdc48d90000 r--p 00000000 08:20 12438                      /usr/lib/x86_64-linux-gnu/ld-2.31.so
7fdc48d90000-7fdc48db3000 r-xp 00001000 08:20 12438                      /usr/lib/x86_64-linux-gnu/ld-2.31.so
```

プロセスの親子関係
システムの初期化について
1. コンピュータの電源を入れる
2. BIOSやUFEIなどのファームウェアが起動して、ハードウェアを初期化する
3. ファームウェアがGRUBなどのブートローダを起動する
4. ブートローダがOSカーネル（Linuxカーネル）を起動する
5. Linuxカーネルがinit プロセスを起動する。
6. initプロセスが子プロセス.....さらに子プロセスに伝えていく

```
ishii_tdd@PCS27515:~/hoge02/Linux_shikumi/2-1$ pstree -p
systemd(1)─┬─ModemManager(340)─┬─{ModemManager}(360)
           │                   └─{ModemManager}(366)
           ├─NetworkManager(282)─┬─{NetworkManager}(358)
           │                     └─{NetworkManager}(361)
           ├─accounts-daemon(279)─┬─{accounts-daemon}(284)
           │                      └─{accounts-daemon}(337)
           ├─agetty(442)
           ├─atd(435)
           ├─avahi-daemon(280)───avahi-daemon(319)
           ├─containerd(10354)─┬─{containerd}(10357)
           │                   ├─{containerd}(10358)
           │                   ├─{containerd}(10359)
           │                   ├─{containerd}(10360)
```

プロセスの終了

親プロセスがwait()やwaitpid()といったシステムコールを呼び出すことで以下の情報が得られる。
- プロセスの戻り値。exit()関数の引数を256で割ったあまり。
- シグナルによって終了したか否か
- 終了までにどれだけのCPU時間を使ったか

```
ishii_tdd@PCS27515:~/hoge02/Linux_shikumi/2-1$ cat wait-ret.sh
#!/bin/bash
false &
# falseコマンドの終了を待ち合わせる。falseコマンドのPIDは$!変数から得られる。
wait $!
# wait後のfalseプロセスの戻り値は$?から得られる。
echo "falseコマンドが終了しました。: $?"
ishii_tdd@PCS27515:~/hoge02/Linux_shikumi/2-1$ ./wait-ret.sh
falseコマンドが終了しました。: 1
```

### ゾンビプロセスと孤児プロセス

親プロセスが子プロセスを生成してから、wait()関数などのシステムコールを呼ぶまで、子プロセスはシステム上に残り続ける
これを「ゾンビプロセス」という。

親プロセスがwait()関数などのシステムコールを呼ぶまえに、実行を終了した場合、その子プロセスは「孤児プロセス」となる。


### シグナル

シグナルとは、あるプロセスが他のプロセスの何かを通知して、外部からの実行の流れを強制的に変えるための仕組みである。

SIGSTOP : Ctrl + Z　、　SIGINT : Ctrl + C

```
ishii_tdd@PCS27515:~/hoge02/Linux_shikumi/2-1$ cat intignore.py
#!/usr/bin/python3
import signal

# 第1引数にはハンドラを設定するシグナルの番号
# 第2引数にはシグナルハンドラを設定する。
signal.signal(signal.SIGINT, signal.SIG_IGN)
while True:
    pass
ishii_tdd@PCS27515:~/hoge02/Linux_shikumi/2-1$ ./intignore.py
^C^C^C^Z
[4]+  Stopped                 ./intignore.py
ishii_tdd@PCS27515:~/hoge02/Linux_shikumi/2-1$ ps -aux | grep intignore
ishii_t+   15345  5.6  0.1  19268  9416 pts/0    T    15:52   0:04 /usr/bin/python3 ./intignore.py
ishii_t+   15347  2.9  0.1  19268  9296 pts/0    T    15:53   0:01 /usr/bin/python3 ./intignore.py
ishii_t+   15348  7.2  0.1  19268  9296 pts/0    T    15:53   0:02 /usr/bin/python3 ./intignore.py
ishii_t+   15351  0.0  0.0  10076   648 pts/0    S+   15:53   0:00 grep --color=auto intignore
```

### セッションとプロセスグループなどの関係。

セッションには、セッションID（SID）と呼ばれる一意の値が割り振られている。

プロセスグループには、複数のプロセスをまとめてコントロールする、プロセスグループID（PGID）が割り振られている。


![image](https://github.com/141Tom/memo/assets/135770970/22b16ff6-b4f4-4472-bc2d-82f56eea32d5)


### デーモン

デーモンは、常駐プロセスのことを指す。デーモンはシステムの開始から終了まで存在し続ける。
- 端末から入出力する必要がないので、端末が割り振られていない
- あらゆるログインセッションが終了しても影響を受けないように、独自のセッション（？）をもつ。
- デーモンを生成したプロセス（親プロセス）がデーモンの終了を気にしないでいいように、initが親プロセスになる。

```
ishii_tdd@PCS27515:~/hoge02/Linux_shikumi/2-1$ ps ajx

親プロセス プロセス プロセスグループ セッション 標準入出力デバイス(TTY)

   PPID     PID    PGID     SID TTY        TPGID STAT   UID   TIME COMMAND
      0       1       1       1 ?             -1 Ss       0   0:03 /sbin/init
      1       2       0       0 ?             -1 Sl       0   0:00 /init
      2       5       0       0 ?             -1 Sl       0   0:00 plan9 --control-socket 6 --log-level 4 --server-fd 7 --pipe-fd 9 --log-truncate
      1      58      58      58 ?             -1 S<s      0   0:04 /lib/systemd/systemd-journald
      1      84      84      84 ?             -1 Ss       0   0:00 /lib/systemd/systemd-udevd
      1      92      92      92 ?             -1 Ss     100   0:00 /lib/systemd/systemd-networkd
      1     264     264     264 ?             -1 Ss       0   0:00 snapfuse /var/lib/snapd/snaps/core20_1950.snap /snap/core20/1950 -o ro,nodev,allow_other,s
      1     265     265     265 ?             -1 Ss       0   0:00 snapfuse /var/lib/snapd/snaps/lxd_24061.snap /snap/lxd/24061 -o ro,nodev,allow_other,suid
      1     266     266     266 ?             -1 Ss       0   0:00 snapfuse /var/lib/snapd/snaps/core20_1974.snap /snap/core20/1974 -o ro,nodev,allow_other,s
      1     267     267     267 ?             -1 Ss       0   0:00 snapfuse /var/lib/snapd/snaps/snapd_19361.snap /snap/snapd/19361 -o ro,nodev,allow_other,s
      1     268     268     268 ?             -1 Ss       0   0:03 snapfuse /var/lib/snapd/snaps/snapd_19457.snap /snap/snapd/19457 -o ro,nodev,allow_other,s
      1     275     275     275 ?             -1 Ss     101   0:00 /lib/systemd/systemd-resolved
      1     279     279     279 ?             -1 Ssl      0   0:00 /usr/lib/accountsservice/accounts-daemon
      1     280     280     280 ?             -1 Ss     118   0:00 avahi-daemon: running [PCS27515-2.local]
      1     281     281     281 ?             -1 Ss     103   0:01 /usr/bin/dbus-daemon --system --address=systemd: --nofork --nopidfile --systemd-activation
      1     282     282     282 ?             -1 Ssl      0   0:00 /usr/sbin/NetworkManager --no-daemon
      1     287     287     287 ?             -1 Ss       0   0:00 /usr/bin/python3 /usr/bin/networkd-dispatcher --run-startup-triggers
      1     289     289     289 ?             -1 Ssl      0   0:00 /usr/lib/policykit-1/polkitd --no-debug
      1     291     291     291 ?             -1 Ssl    104   0:04 /usr/sbin/rsyslogd -n -iNONE
```

